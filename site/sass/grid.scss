@import "_normalize.scss";
@import "_mixins.scss";

//
// Grid system
// --------------------------------------------------

$grid-columns: 12;
$grid-gutter-width: 30px;

$row-xs-offset: 30px;
$row-sm-offset: $row-xs-offset;
$row-md-offset: $row-xs-offset;
$row-lg-offset: $row-xs-offset;

$container-xs: 300px;
$container-sm: 720px + $grid-gutter-width;
$container-md: 940px + $grid-gutter-width;
$container-lg: 1170px + $grid-gutter-width;

$screen-xs-min: 480px;
$screen-sm-min: 768px;
$screen-md-min: 992px;
$screen-lg-min: 1200px;

@mixin container-fixed($gutter: $grid-gutter-width) {
  margin-right: auto;
  margin-left: auto;
  padding-left: ($gutter / 2);
  padding-right: ($gutter / 2);
  @include clearfix;
}

@mixin make-row($gutter: $grid-gutter-width) {
  margin-left: ceil(($gutter / -2));
  margin-right: floor(($gutter / -2));
  @include clearfix;
}

@mixin make-grid-columns($i: 1, $list: ".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}";
  }
  #{$list} {
    min-height: 1px;
    padding-left: ceil(($grid-gutter-width / 2));
    padding-right: floor(($grid-gutter-width / 2));
  }
}

@mixin float-grid-columns($class, $i: 1, $list: ".col-#{$class}-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .col-#{$class}-#{$i}";
  }
  #{$list} {
    float: left;
  }
}

@mixin calc-grid-column($index, $class, $type) {
  @if ($type == width) and ($index > 0) {
    .col-#{$class}-#{$index} {
      width: percentage(($index / $grid-columns));
    }
  }
  @if ($type == push) and ($index > 0) {
    .col-#{$class}-push-#{$index} {
      left: percentage(($index / $grid-columns));
    }
  }
  @if ($type == push) and ($index == 0) {
    .col-#{$class}-push-0 {
      left: auto;
    }
  }
  @if ($type == pull) and ($index > 0) {
    .col-#{$class}-pull-#{$index} {
      right: percentage(($index / $grid-columns));
    }
  }
  @if ($type == pull) and ($index == 0) {
    .col-#{$class}-pull-0 {
      right: auto;
    }
  }
  @if ($type == offset) {
    .col-#{$class}-offset-#{$index} {
      margin-left: percentage(($index / $grid-columns));
    }
  }
}

@mixin loop-grid-columns($columns, $class, $type) {
  @for $i from 0 through $columns {
    @include calc-grid-column($i, $class, $type);
  }
}

@mixin make-grid($class) {
  @include float-grid-columns($class);
  @include loop-grid-columns($grid-columns, $class, width);
  @include loop-grid-columns($grid-columns, $class, offset);
}

// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.

.container {
  @include container-fixed($grid-gutter-width);
  min-width: $container-xs;

  @media (min-width: $screen-sm-min) {
    width: $container-sm;
  }
  @media (min-width: $screen-md-min) {
    width: $container-md;
  }
  @media (min-width: $screen-lg-min) {
    width: $container-lg;
  }
}

// Fluid container
//
// Utilizes the mixin meant for fixed width containers, but without any defined
// width for fluid, full width layouts.

.container-fluid {
  @include container-fixed;
}

// Row
//
// Rows contain and clear the floats of your columns.

.row {
  @include make-row;
}

// Columns
//
// Common styles for small and large grid columns

@include make-grid-columns;

[class*="col-"]{
  margin-top: $row-xs-offset;
}

.row{
  margin-top: -$row-xs-offset;
}

* + .row{
  margin-top: $row-xs-offset;
}

// Extra small grid
//
// Columns, offsets, pushes, and pulls for extra small devices like
// smartphones.

@media (min-width: $screen-xs-min) {
  @include make-grid(xs);
}

@media (min-width: $screen-xs-min) and (max-width: $screen-sm-min - 1) {
  .col-xs-clear{
    clear: left;
  }
}

// Small grid
//
// Columns, offsets, pushes, and pulls for the small device range, from phones
// to tablets.

@media (min-width: $screen-sm-min) {
  [class*="col-"]{
    margin-top: $row-sm-offset;
  }

  .row{
    margin-top: -$row-sm-offset;
  }

  * + .row{
    margin-top: $row-sm-offset;
  }

  @include make-grid(sm);
}

@media (min-width: $screen-sm-min) and (max-width: $screen-md-min - 1) {
  .col-sm-clear{
    clear: left;
  }
}

// Medium grid
//
// Columns, offsets, pushes, and pulls for the desktop device range.

@media (min-width: $screen-md-min) {
  [class*="col-"]{
    margin-top: $row-md-offset;
  }

  .row{
    margin-top: -$row-md-offset;
  }

  * + .row{
    margin-top: $row-md-offset;
  }

  @include make-grid(md);
}

@media (min-width: $screen-md-min) and (max-width: $screen-lg-min - 1) {
  .col-md-clear{
    clear: left;
  } 
}

// Large grid
//
// Columns, offsets, pushes, and pulls for the large desktop device range.

@media (min-width: $screen-lg-min) {
  [class*="col-"]{
    margin-top: $row-lg-offset;
  }

  .row{
    margin-top: -$row-lg-offset;
  }

  * + .row{
    margin-top: $row-lg-offset;
  }

  .col-lg-clear{
    clear: left;
  }

  @include make-grid(lg);
}